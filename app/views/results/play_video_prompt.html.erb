<div class="flex flex-col items-center justify-center h-screen bg-gray-100 p-6 relative">
  <canvas class="confetti"></canvas> <!-- 紙吹雪のためのCanvas追加 -->
  
  <h1 class="text-3xl font-bold text-green-600 mb-4 z-10">10問連続正解です🎊</h1>
  <p class="text-lg text-gray-700 mb-6 text-center z-10">
    10問連続正解のあなたは 働く車 の動画を一度だけ再生できる権利があります。再生しますか？
  </p>

  <div class="flex space-x-4 z-10">
    <%= button_to '再生する', play_video_results_path, method: :get, class: 'bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded shadow' %>
    <%= link_to 'ゲームに戻る', random_question_path, class: 'bg-gray-300 hover:bg-gray-400 text-gray-800 font-semibold py-2 px-4 rounded shadow' %>
  </div>
</div>

<script>
(function(){
  window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame;
  var canvas = document.querySelector("canvas.confetti");
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
  var ctx = canvas.getContext("2d");
  ctx.globalCompositeOperation = "source-over";
  var particles = [];
  var pIndex = 0;
  var x, y, frameId;
  
  function Dot(x, y, vx, vy, color){
    this.x = x;
    this.y = y;
    this.vx = vx;
    this.vy = vy;
    this.color = color;
    particles[pIndex] = this;
    this.id = pIndex;
    pIndex++;
    this.life = 0;
    this.maxlife = 1000;
    this.degree = getRandom(0, 360);
    this.size = Math.floor(getRandom(8, 10));
  };

  Dot.prototype.draw = function(){
    this.degree += 1;
    this.vx *= 0.99;
    this.vy *= 0.999;
    this.x += this.vx + Math.cos(this.degree * Math.PI / 600);
    this.y += this.vy;
    this.width = this.size;
    this.height = Math.cos(this.degree * Math.PI / 40) * this.size;
    ctx.fillStyle = this.color;
    ctx.beginPath();
    ctx.moveTo(this.x + this.width / 2, this.y + this.height / 2);
    ctx.lineTo(this.x + this.width, this.y + this.height);
    ctx.lineTo(this.x + this.width, this.y);
    ctx.lineTo(this.x, this.y);
    ctx.closePath();
    ctx.fill();
    this.life++;
    if(this.life >= this.maxlife){
      delete particles[this.id];
    }
  }

  window.addEventListener("resize", function(){
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
  });

  function loop(){
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    if(frameId % 2 == 0) {
      new Dot(canvas.width * Math.random(), -canvas.height / 2, getRandom(1, 3), getRandom(2, 4), "#ED1A3D");
      new Dot(canvas.width * Math.random(), -canvas.height / 2, getRandom(1, 3), getRandom(2, 4), "#FFEB3D");
      new Dot(canvas.width * Math.random(), -canvas.height / 2, getRandom(1, 3), getRandom(2, 4), "#009688");
      new Dot(canvas.width * Math.random(), -canvas.height / 2, getRandom(1, 3), getRandom(2, 4), "#0693e3");
    }
    for(var i in particles){
      particles[i].draw();
    }
    frameId = requestAnimationFrame(loop);
  }

  loop();

  function getRandom(min, max) {
    return Math.random() * (max - min) + min;
  }
})();
</script>

<style>
* {
  margin: 0;
  background: #fff;
}
.confetti {
  height: 100%;
  width: 100%;
  position: absolute;
  top: 0;
  left: 0;
  z-index: 1; /* コンテンツの後ろに配置 */
}
</style>